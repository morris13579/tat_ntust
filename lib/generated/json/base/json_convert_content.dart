// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_app/src/model/moodle_webapi/moodle_setting_entity.dart';
import 'package:flutter_app/src/model/announcement/announcement_json.dart';
import 'package:flutter_app/src/model/course/course_class_json.dart';
import 'package:flutter_app/src/model/course/course_main_extra_json.dart';
import 'package:flutter_app/src/model/course/course_search_json.dart';
import 'package:flutter_app/src/model/course/course_semester.dart';
import 'package:flutter_app/src/model/course_table/course_table_json.dart';
import 'package:flutter_app/src/model/grade/item_name.dart';
import 'package:flutter_app/src/model/grade/leader.dart';
import 'package:flutter_app/src/model/grade/table_data_type_a.dart';
import 'package:flutter_app/src/model/grade/table_data_type_b.dart';
import 'package:flutter_app/src/model/grade/table_data_type_c.dart';
import 'package:flutter_app/src/model/grade/tables.dart';
import 'package:flutter_app/src/model/grade/weight.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_core_course_get_contents.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_core_enrol_get_users.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_gradereport_user_get_grades_table.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_mod_forum_get_forum_discussions_paginated.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_profile_entity.dart';
import 'package:flutter_app/src/model/moodle_webapi/moodle_score.dart';
import 'package:flutter_app/src/model/ntust/ap_tree_json.dart';
import 'package:flutter_app/src/model/remote_config/remote_config_version_info.dart';
import 'package:flutter_app/src/model/score/score_json.dart';
import 'package:flutter_app/src/model/setting/setting_json.dart';
import 'package:flutter_app/src/model/userdata/user_data_json.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<MoodleSettingEntity>[] is M) {
      return data.map<MoodleSettingEntity>((Map<String, dynamic> e) =>
          MoodleSettingEntity.fromJson(e)).toList() as M;
    }
    if (<MoodleSettingPreferences>[] is M) {
      return data.map<MoodleSettingPreferences>((Map<String, dynamic> e) =>
          MoodleSettingPreferences.fromJson(e)).toList() as M;
    }
    if (<MoodleSettingPreferencesProcessors>[] is M) {
      return data.map<MoodleSettingPreferencesProcessors>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesProcessors.fromJson(e)).toList() as M;
    }
    if (<MoodleSettingPreferencesComponents>[] is M) {
      return data.map<MoodleSettingPreferencesComponents>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesComponents.fromJson(e)).toList() as M;
    }
    if (<MoodleSettingPreferencesComponentsNotifications>[] is M) {
      return data.map<MoodleSettingPreferencesComponentsNotifications>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesComponentsNotifications.fromJson(e))
          .toList() as M;
    }
    if (<MoodleSettingPreferencesComponentsNotificationsProcessors>[] is M) {
      return data.map<
          MoodleSettingPreferencesComponentsNotificationsProcessors>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesComponentsNotificationsProcessors.fromJson(e))
          .toList() as M;
    }
    if (<MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedin>[
    ] is M) {
      return data.map<
          MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedin>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedin
              .fromJson(e)).toList() as M;
    }
    if (<MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedoff>[
    ] is M) {
      return data.map<
          MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedoff>((
          Map<String, dynamic> e) =>
          MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedoff
              .fromJson(e)).toList() as M;
    }
    if (<AnnouncementJson>[] is M) {
      return data.map<AnnouncementJson>((Map<String, dynamic> e) =>
          AnnouncementJson.fromJson(e)).toList() as M;
    }
    if (<AnnouncementInfoJson>[] is M) {
      return data.map<AnnouncementInfoJson>((Map<String, dynamic> e) =>
          AnnouncementInfoJson.fromJson(e)).toList() as M;
    }
    if (<CourseMainJson>[] is M) {
      return data.map<CourseMainJson>((Map<String, dynamic> e) =>
          CourseMainJson.fromJson(e)).toList() as M;
    }
    if (<CourseExtraJson>[] is M) {
      return data.map<CourseExtraJson>((Map<String, dynamic> e) =>
          CourseExtraJson.fromJson(e)).toList() as M;
    }
    if (<ClassJson>[] is M) {
      return data.map<ClassJson>((Map<String, dynamic> e) =>
          ClassJson.fromJson(e)).toList() as M;
    }
    if (<ClassroomJson>[] is M) {
      return data.map<ClassroomJson>((Map<String, dynamic> e) =>
          ClassroomJson.fromJson(e)).toList() as M;
    }
    if (<TeacherJson>[] is M) {
      return data.map<TeacherJson>((Map<String, dynamic> e) =>
          TeacherJson.fromJson(e)).toList() as M;
    }
    if (<SemesterJson>[] is M) {
      return data.map<SemesterJson>((Map<String, dynamic> e) =>
          SemesterJson.fromJson(e)).toList() as M;
    }
    if (<ClassmateJson>[] is M) {
      return data.map<ClassmateJson>((Map<String, dynamic> e) =>
          ClassmateJson.fromJson(e)).toList() as M;
    }
    if (<CourseExtraInfoJson>[] is M) {
      return data.map<CourseExtraInfoJson>((Map<String, dynamic> e) =>
          CourseExtraInfoJson.fromJson(e)).toList() as M;
    }
    if (<CourseMainInfoJson>[] is M) {
      return data.map<CourseMainInfoJson>((Map<String, dynamic> e) =>
          CourseMainInfoJson.fromJson(e)).toList() as M;
    }
    if (<CourseSearchJson>[] is M) {
      return data.map<CourseSearchJson>((Map<String, dynamic> e) =>
          CourseSearchJson.fromJson(e)).toList() as M;
    }
    if (<CourseSemesterJson>[] is M) {
      return data.map<CourseSemesterJson>((Map<String, dynamic> e) =>
          CourseSemesterJson.fromJson(e)).toList() as M;
    }
    if (<CourseTableJson>[] is M) {
      return data.map<CourseTableJson>((Map<String, dynamic> e) =>
          CourseTableJson.fromJson(e)).toList() as M;
    }
    if (<CourseInfoJson>[] is M) {
      return data.map<CourseInfoJson>((Map<String, dynamic> e) =>
          CourseInfoJson.fromJson(e)).toList() as M;
    }
    if (<ItemNameEntity>[] is M) {
      return data.map<ItemNameEntity>((Map<String, dynamic> e) =>
          ItemNameEntity.fromJson(e)).toList() as M;
    }
    if (<LeaderEntity>[] is M) {
      return data.map<LeaderEntity>((Map<String, dynamic> e) =>
          LeaderEntity.fromJson(e)).toList() as M;
    }
    if (<TableDataTypeAEntity>[] is M) {
      return data.map<TableDataTypeAEntity>((Map<String, dynamic> e) =>
          TableDataTypeAEntity.fromJson(e)).toList() as M;
    }
    if (<TableDataTypeBEntity>[] is M) {
      return data.map<TableDataTypeBEntity>((Map<String, dynamic> e) =>
          TableDataTypeBEntity.fromJson(e)).toList() as M;
    }
    if (<TableDataTypeCEntity>[] is M) {
      return data.map<TableDataTypeCEntity>((Map<String, dynamic> e) =>
          TableDataTypeCEntity.fromJson(e)).toList() as M;
    }
    if (<TablesEntity>[] is M) {
      return data.map<TablesEntity>((Map<String, dynamic> e) =>
          TablesEntity.fromJson(e)).toList() as M;
    }
    if (<WeightEntity>[] is M) {
      return data.map<WeightEntity>((Map<String, dynamic> e) =>
          WeightEntity.fromJson(e)).toList() as M;
    }
    if (<MoodleCoreCourseGetContents>[] is M) {
      return data.map<MoodleCoreCourseGetContents>((Map<String, dynamic> e) =>
          MoodleCoreCourseGetContents.fromJson(e)).toList() as M;
    }
    if (<Modules>[] is M) {
      return data.map<Modules>((Map<String, dynamic> e) => Modules.fromJson(e))
          .toList() as M;
    }
    if (<Contents>[] is M) {
      return data.map<Contents>((Map<String, dynamic> e) =>
          Contents.fromJson(e)).toList() as M;
    }
    if (<MoodleCoreEnrolGetUsers>[] is M) {
      return data.map<MoodleCoreEnrolGetUsers>((Map<String, dynamic> e) =>
          MoodleCoreEnrolGetUsers.fromJson(e)).toList() as M;
    }
    if (<Roles>[] is M) {
      return data.map<Roles>((Map<String, dynamic> e) => Roles.fromJson(e))
          .toList() as M;
    }
    if (<MoodleGradeReportUserGetGradesTable>[] is M) {
      return data.map<MoodleGradeReportUserGetGradesTable>((
          Map<String, dynamic> e) =>
          MoodleGradeReportUserGetGradesTable.fromJson(e)).toList() as M;
    }
    if (<Tables>[] is M) {
      return data.map<Tables>((Map<String, dynamic> e) => Tables.fromJson(e))
          .toList() as M;
    }
    if (<TableData>[] is M) {
      return data.map<TableData>((Map<String, dynamic> e) =>
          TableData.fromJson(e)).toList() as M;
    }
    if (<ItemName>[] is M) {
      return data.map<ItemName>((Map<String, dynamic> e) =>
          ItemName.fromJson(e)).toList() as M;
    }
    if (<Leader>[] is M) {
      return data.map<Leader>((Map<String, dynamic> e) => Leader.fromJson(e))
          .toList() as M;
    }
    if (<Weight>[] is M) {
      return data.map<Weight>((Map<String, dynamic> e) => Weight.fromJson(e))
          .toList() as M;
    }
    if (<Grade>[] is M) {
      return data.map<Grade>((Map<String, dynamic> e) => Grade.fromJson(e))
          .toList() as M;
    }
    if (<Range>[] is M) {
      return data.map<Range>((Map<String, dynamic> e) => Range.fromJson(e))
          .toList() as M;
    }
    if (<Percentage>[] is M) {
      return data.map<Percentage>((Map<String, dynamic> e) =>
          Percentage.fromJson(e)).toList() as M;
    }
    if (<Feedback>[] is M) {
      return data.map<Feedback>((Map<String, dynamic> e) =>
          Feedback.fromJson(e)).toList() as M;
    }
    if (<ContributionToCourseTotal>[] is M) {
      return data.map<ContributionToCourseTotal>((Map<String, dynamic> e) =>
          ContributionToCourseTotal.fromJson(e)).toList() as M;
    }
    if (<MoodleModForumGetForumDiscussionsPaginated>[] is M) {
      return data.map<MoodleModForumGetForumDiscussionsPaginated>((
          Map<String, dynamic> e) =>
          MoodleModForumGetForumDiscussionsPaginated.fromJson(e)).toList() as M;
    }
    if (<Discussions>[] is M) {
      return data.map<Discussions>((Map<String, dynamic> e) =>
          Discussions.fromJson(e)).toList() as M;
    }
    if (<Attachments>[] is M) {
      return data.map<Attachments>((Map<String, dynamic> e) =>
          Attachments.fromJson(e)).toList() as M;
    }
    if (<MoodleProfileEntity>[] is M) {
      return data.map<MoodleProfileEntity>((Map<String, dynamic> e) =>
          MoodleProfileEntity.fromJson(e)).toList() as M;
    }
    if (<MoodleProfileFunctions>[] is M) {
      return data.map<MoodleProfileFunctions>((Map<String, dynamic> e) =>
          MoodleProfileFunctions.fromJson(e)).toList() as M;
    }
    if (<MoodleProfileAdvancedfeatures>[] is M) {
      return data.map<MoodleProfileAdvancedfeatures>((Map<String, dynamic> e) =>
          MoodleProfileAdvancedfeatures.fromJson(e)).toList() as M;
    }
    if (<MoodleScoreItem>[] is M) {
      return data.map<MoodleScoreItem>((Map<String, dynamic> e) =>
          MoodleScoreItem.fromJson(e)).toList() as M;
    }
    if (<APTreeJson>[] is M) {
      return data.map<APTreeJson>((Map<String, dynamic> e) =>
          APTreeJson.fromJson(e)).toList() as M;
    }
    if (<APListJson>[] is M) {
      return data.map<APListJson>((Map<String, dynamic> e) =>
          APListJson.fromJson(e)).toList() as M;
    }
    if (<RemoteConfigVersionInfo>[] is M) {
      return data.map<RemoteConfigVersionInfo>((Map<String, dynamic> e) =>
          RemoteConfigVersionInfo.fromJson(e)).toList() as M;
    }
    if (<AndroidIosVersionInfo>[] is M) {
      return data.map<AndroidIosVersionInfo>((Map<String, dynamic> e) =>
          AndroidIosVersionInfo.fromJson(e)).toList() as M;
    }
    if (<ScoreRankJson>[] is M) {
      return data.map<ScoreRankJson>((Map<String, dynamic> e) =>
          ScoreRankJson.fromJson(e)).toList() as M;
    }
    if (<SemesterScoreJson>[] is M) {
      return data.map<SemesterScoreJson>((Map<String, dynamic> e) =>
          SemesterScoreJson.fromJson(e)).toList() as M;
    }
    if (<RankJson>[] is M) {
      return data.map<RankJson>((Map<String, dynamic> e) =>
          RankJson.fromJson(e)).toList() as M;
    }
    if (<ScoreItemJson>[] is M) {
      return data.map<ScoreItemJson>((Map<String, dynamic> e) =>
          ScoreItemJson.fromJson(e)).toList() as M;
    }
    if (<SettingJson>[] is M) {
      return data.map<SettingJson>((Map<String, dynamic> e) =>
          SettingJson.fromJson(e)).toList() as M;
    }
    if (<CourseSettingJson>[] is M) {
      return data.map<CourseSettingJson>((Map<String, dynamic> e) =>
          CourseSettingJson.fromJson(e)).toList() as M;
    }
    if (<OtherSettingJson>[] is M) {
      return data.map<OtherSettingJson>((Map<String, dynamic> e) =>
          OtherSettingJson.fromJson(e)).toList() as M;
    }
    if (<UserDataJson>[] is M) {
      return data.map<UserDataJson>((Map<String, dynamic> e) =>
          UserDataJson.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (MoodleSettingEntity).toString(): MoodleSettingEntity.fromJson,
    (MoodleSettingPreferences).toString(): MoodleSettingPreferences.fromJson,
    (MoodleSettingPreferencesProcessors)
        .toString(): MoodleSettingPreferencesProcessors.fromJson,
    (MoodleSettingPreferencesComponents)
        .toString(): MoodleSettingPreferencesComponents.fromJson,
    (MoodleSettingPreferencesComponentsNotifications)
        .toString(): MoodleSettingPreferencesComponentsNotifications.fromJson,
    (MoodleSettingPreferencesComponentsNotificationsProcessors)
        .toString(): MoodleSettingPreferencesComponentsNotificationsProcessors
        .fromJson,
    (MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedin)
        .toString(): MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedin
        .fromJson,
    (MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedoff)
        .toString(): MoodleSettingPreferencesComponentsNotificationsProcessorsLoggedoff
        .fromJson,
    (AnnouncementJson).toString(): AnnouncementJson.fromJson,
    (AnnouncementInfoJson).toString(): AnnouncementInfoJson.fromJson,
    (CourseMainJson).toString(): CourseMainJson.fromJson,
    (CourseExtraJson).toString(): CourseExtraJson.fromJson,
    (ClassJson).toString(): ClassJson.fromJson,
    (ClassroomJson).toString(): ClassroomJson.fromJson,
    (TeacherJson).toString(): TeacherJson.fromJson,
    (SemesterJson).toString(): SemesterJson.fromJson,
    (ClassmateJson).toString(): ClassmateJson.fromJson,
    (CourseExtraInfoJson).toString(): CourseExtraInfoJson.fromJson,
    (CourseMainInfoJson).toString(): CourseMainInfoJson.fromJson,
    (CourseSearchJson).toString(): CourseSearchJson.fromJson,
    (CourseSemesterJson).toString(): CourseSemesterJson.fromJson,
    (CourseTableJson).toString(): CourseTableJson.fromJson,
    (CourseInfoJson).toString(): CourseInfoJson.fromJson,
    (ItemNameEntity).toString(): ItemNameEntity.fromJson,
    (LeaderEntity).toString(): LeaderEntity.fromJson,
    (TableDataTypeAEntity).toString(): TableDataTypeAEntity.fromJson,
    (TableDataTypeBEntity).toString(): TableDataTypeBEntity.fromJson,
    (TableDataTypeCEntity).toString(): TableDataTypeCEntity.fromJson,
    (TablesEntity).toString(): TablesEntity.fromJson,
    (WeightEntity).toString(): WeightEntity.fromJson,
    (MoodleCoreCourseGetContents).toString(): MoodleCoreCourseGetContents
        .fromJson,
    (Modules).toString(): Modules.fromJson,
    (Contents).toString(): Contents.fromJson,
    (MoodleCoreEnrolGetUsers).toString(): MoodleCoreEnrolGetUsers.fromJson,
    (Roles).toString(): Roles.fromJson,
    (MoodleGradeReportUserGetGradesTable)
        .toString(): MoodleGradeReportUserGetGradesTable.fromJson,
    (Tables).toString(): Tables.fromJson,
    (TableData).toString(): TableData.fromJson,
    (ItemName).toString(): ItemName.fromJson,
    (Leader).toString(): Leader.fromJson,
    (Weight).toString(): Weight.fromJson,
    (Grade).toString(): Grade.fromJson,
    (Range).toString(): Range.fromJson,
    (Percentage).toString(): Percentage.fromJson,
    (Feedback).toString(): Feedback.fromJson,
    (ContributionToCourseTotal).toString(): ContributionToCourseTotal.fromJson,
    (MoodleModForumGetForumDiscussionsPaginated)
        .toString(): MoodleModForumGetForumDiscussionsPaginated.fromJson,
    (Discussions).toString(): Discussions.fromJson,
    (Attachments).toString(): Attachments.fromJson,
    (MoodleProfileEntity).toString(): MoodleProfileEntity.fromJson,
    (MoodleProfileFunctions).toString(): MoodleProfileFunctions.fromJson,
    (MoodleProfileAdvancedfeatures).toString(): MoodleProfileAdvancedfeatures
        .fromJson,
    (MoodleScoreItem).toString(): MoodleScoreItem.fromJson,
    (APTreeJson).toString(): APTreeJson.fromJson,
    (APListJson).toString(): APListJson.fromJson,
    (RemoteConfigVersionInfo).toString(): RemoteConfigVersionInfo.fromJson,
    (AndroidIosVersionInfo).toString(): AndroidIosVersionInfo.fromJson,
    (ScoreRankJson).toString(): ScoreRankJson.fromJson,
    (SemesterScoreJson).toString(): SemesterScoreJson.fromJson,
    (RankJson).toString(): RankJson.fromJson,
    (ScoreItemJson).toString(): ScoreItemJson.fromJson,
    (SettingJson).toString(): SettingJson.fromJson,
    (CourseSettingJson).toString(): CourseSettingJson.fromJson,
    (OtherSettingJson).toString(): OtherSettingJson.fromJson,
    (UserDataJson).toString(): UserDataJson.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}